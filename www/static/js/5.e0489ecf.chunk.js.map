{"version":3,"sources":["utils/Http.js","utils/api.js","services/UserServices.js","components/Scroll/Scroll.js","components/Search/Search.js","services/MessageServices.js","pages/message/message/children/item.js","pages/message/message/message.js"],"names":["Http","url","data","params","Object","entries","reduce","arr","k","v","concat","encodeURIComponent","join","window","fetch","response","json","Error","method","headers","body","JSON","stringify","res","REGIESTER_API","LOGIN_API","CHECK_LOGIN","LOGOUT_API","FIND_FRIEND_BY_KEY_API","FIND_FRIEND_BY__id_API","ADD_FRIEND_API","IS_FRIEND_API","FRIEND_LIST_API","START_CHAT_API","END_CHAT_API","MESSAGE_LIST_API","requestFriendByKey","a","post","api","result","code","message","requestFriendBy_ID","get","requestAddFriend","requestIsFriend","requestFriendList","scroll","props","state","className","ref","scrDom","this","children","BScroll","tap","click","on","refresh","React","Component","Search","type","placeholder","onKeyUp","searchAction","bind","ev","persist","val","target","value","list","List","filter","item","name","indexOf","sendFilterList","requestStartChat","requestEndChat","requestMessageList","memo","history","useState","time","onClick","push","info","_id","src","averImg","alt","websocket","useSelector","websocketSelector","date","setDate","day","setDay","messageList","setMessageList","parse","localStorage","getItem","newMessage","setNewMessage","useEffect","d","Date","month","getMonth","getDate","getDay","onmessage","console","log","status","scrollTo","maxScrollY","messagelist","key","Map","has","set","unique","initData","i","length","j","gulp","newArr","map","friend_id","sendId","toId","friend_info","Promise","all","id","Scroll","mess"],"mappings":"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","file":"static/js/5.e0489ecf.chunk.js","sourcesContent":["// // 提供fetch请求\r\n// // 对fetch进行二次封装\r\n\r\n// import \"whatwg-fetch\";\r\n\r\n// // fetch();\r\n\r\n// export default class Http {\r\n//   static async request(method, url, data) {\r\n//     console.log(data);\r\n//     //get方法的参数直接接在url的后面\r\n//     let dataStr = \"?\";\r\n//     Object.keys(data).map(key => {\r\n//       dataStr += key + \"=\" + data[key];\r\n//     });\r\n\r\n//     //只有post方法有配置项\r\n    \r\n//     let option= method === \"POST\"?{\r\n//         method,\r\n//         headers: {\r\n//           'Content-Type': 'application/json'\r\n//         },\r\n//         body: JSON.stringify(data)\r\n//     }:{};\r\n\r\n//     url = method === \"GET\" ? url + \"?\" + dataStr : url;\r\n\r\n//     const response = await window.fetch(url,option);\r\n\r\n//     return this.isSuccess(response);\r\n//   }\r\n\r\n//   // 判断响应结果是否成功\r\n//   static isSuccess(res) {\r\n//     if (res.status >= 200 && res.status < 300) {\r\n//       return res.json();   //格式化数据\r\n//     } else {\r\n//       this.requestExpection(res);\r\n//     }\r\n//   }\r\n\r\n//   // 构建失败对象\r\n//   static requestExpection(res) {\r\n//     throw new Error(res);\r\n//   }\r\n\r\n//   static get(url, data) {\r\n//     return this.request(\"GET\", url, data);\r\n//   }\r\n\r\n//   // post便捷方法\r\n//   static post(url, data) {\r\n//     return this.request(\"POST\", url, data);\r\n//   }\r\n// }\r\n\r\nimport 'whatwg-fetch'\r\n\r\n  export default class Http{\r\n\r\n    static async get(url,data){\r\n\r\n        let params = Object.entries(data).reduce((arr, [k, v]) => arr.concat(encodeURIComponent(k) + '=' + encodeURIComponent(v)), []).join('&')\r\n        // console.log(url+'?'+params);\r\n        \r\n\r\n        try{\r\n            let response = await window.fetch(url+'?'+params);\r\n            let data = await response.json();\r\n\r\n            \r\n            return data\r\n        } catch(error){\r\n            throw new Error(error)\r\n        }\r\n    }\r\n\r\n    static async post(url,data){\r\n        try{\r\n          // console.log(data);\r\n            let response = await fetch(url,{\r\n                method:'POST',\r\n                headers:{'Content-Type': 'application/json'},\r\n                body:JSON.stringify(data)\r\n            })\r\n            let res=await response.json();\r\n            return res;\r\n        }catch(error){\r\n            throw new Error(error)\r\n        }\r\n    }\r\n  }\r\n","// 管理api\r\nexport const HOST = '';\r\n\r\n\r\n\r\n/* \r\n#### 注册\r\n**method:** post\r\n**参数:** tel      password\r\n*/\r\nconst REGIESTER_API = HOST+'/api/user/regiester';\r\n\r\n/* \r\n#### 登录\r\n**method:** post\r\n**参数:** tel   type('code',  'password' )  value \r\n*/\r\nconst LOGIN_API = HOST+'/api/user/login';\r\n\r\n/*\r\n检查登录\r\n参数：无\r\n*/\r\nconst CHECK_LOGIN = HOST+'/api/user/check_login'\r\n\r\n/*\r\n退出登录\r\n参数：无\r\n*/\r\nconst LOGOUT_API = HOST+'/api/user/logout';\r\n\r\n/*\r\n关键字搜索好友\r\n参数：key\r\n*/\r\nconst FIND_FRIEND_BY_KEY_API = HOST+'/api/user/find_friend_by_key';\r\n\r\n\r\n/*\r\n_id获取好友详细信息\r\n参数：friend_id\r\n*/\r\nconst FIND_FRIEND_BY__id_API = HOST+'/api/user/find_friend_by__id';\r\n\r\n\r\n/*\r\n添加好友\r\n参数：friend_id\r\n*/\r\nconst ADD_FRIEND_API = HOST+'/api/friend/addfriend';\r\n\r\n\r\n\r\n/*\r\n判断是否为好友\r\n参数：friend_id\r\n*/\r\nconst IS_FRIEND_API = HOST+'/api/friend/isfriend';\r\n\r\n\r\n\r\n/*\r\n请求好友列表\r\n参数：null\r\n*/\r\nconst FRIEND_LIST_API = HOST+'/api/friend/find_friend_by_user';\r\n\r\n\r\n/*\r\n开始聊天，请求聊天记录\r\n参数：_id, friend_id\r\n*/\r\nconst START_CHAT_API=HOST+'/api/message/start_chat';\r\n\r\n\r\n/*\r\n结束聊天，保存聊天记录\r\n参数：_id, friend_id\r\n*/\r\nconst END_CHAT_API=HOST+'/api/message/end_chat';\r\n\r\n/*\r\n请求信息列表\r\n参数：_id\r\n*/\r\nconst MESSAGE_LIST_API=HOST+'/api/message/messgae_list';\r\n\r\n\r\n\r\nexport default {\r\n    REGIESTER_API,\r\n    LOGIN_API,\r\n    CHECK_LOGIN,\r\n    LOGOUT_API,\r\n    FIND_FRIEND_BY_KEY_API,\r\n    FIND_FRIEND_BY__id_API,\r\n    ADD_FRIEND_API,\r\n    IS_FRIEND_API,\r\n    FRIEND_LIST_API,\r\n    START_CHAT_API,\r\n    END_CHAT_API,\r\n    MESSAGE_LIST_API\r\n}","import Http from '../utils/Http'\r\nimport api from '../utils/api'\r\n\r\n\r\n// 关键字搜索好友列表\r\nexport const requestFriendByKey = async (data)=>{\r\n    let result = await Http.post(api.FIND_FRIEND_BY_KEY_API, data);\r\n\r\n    if(result.code === 0){\r\n      return result.data\r\n    }else{\r\n      return result.message;\r\n    }\r\n  }\r\n\r\n  \r\n  //请求用户详细信息\r\n  export const requestFriendBy_ID = async (data)=>{\r\n    let result = await Http.get(api.FIND_FRIEND_BY__id_API, data);\r\n\r\n    if(result.code === 0){\r\n      return result.data\r\n    }else{\r\n      return result.message;\r\n    }\r\n  }\r\n\r\n\r\n   //请求添加好友\r\n   export const requestAddFriend = async (data)=>{\r\n    let result = await Http.post(api.ADD_FRIEND_API, data);\r\n\r\n    if(result.code === 0){\r\n      return result\r\n    }else{\r\n      return result.message;\r\n    }\r\n  }\r\n\r\n  //查询是否为好友\r\n  export const requestIsFriend = async (data)=>{\r\n    let result = await Http.post(api.IS_FRIEND_API, data);\r\n\r\n    if(result.code === 0){\r\n      return result\r\n    }else{\r\n      return result.message;\r\n    }\r\n  }\r\n\r\n    //请求好友列表\r\n    export const requestFriendList = async (data)=>{\r\n      let result = await Http.get(api.FRIEND_LIST_API, data);\r\n  \r\n      if(result.code === 0){\r\n        return result.data\r\n      }else{\r\n        return result.message;\r\n      }\r\n    }\r\n\r\n\r\n  export default{\r\n    requestFriendByKey,\r\n    requestFriendBy_ID,\r\n    requestAddFriend,\r\n    requestIsFriend,\r\n    requestFriendList\r\n  }\r\n  ","import React from 'react';\r\nimport BScroll from 'better-scroll'\r\nimport './style.scss'\r\n\r\nclass scroll extends React.Component {\r\nconstructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n    };\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app-scroll\" ref={(scrDom)=>{\r\n                this.scrDom=scrDom\r\n            }}>\r\n                <div className=\"scoll-wrap\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidMount(){\r\n         // 创建滚动视图\r\n        this.scroll = new BScroll(this.scrDom, {\r\n            tap: true,\r\n            click: true\r\n        });\r\n        // 如果需要滚动，先刷新滚动视图，就可以在可滚动范围内滚动\r\n        this.scroll.on('beforeScrollStart', ()=>{\r\n            this.scroll.refresh();\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default scroll;","import React from \"react\";\r\nimport './style.scss'\r\n\r\nclass Search extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"search\">\r\n          <i className=\"iconfont icon-sousuo\"></i>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"搜索\"\r\n            onKeyUp={this.searchAction.bind(this)}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n  searchAction(ev){\r\n    ev.persist();\r\n    let val=ev.target.value;\r\n\r\n    let list=this.props.List.filter(item=>{\r\n        return item.name.indexOf(val) > -1;\r\n    });\r\n    \r\n    this.props.sendFilterList(list);\r\n\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import Http from \"../utils/Http\";\r\nimport api from \"../utils/api\";\r\n\r\n// 开始聊天，请求聊天记录\r\nexport const requestStartChat = async data => {\r\n  let result = await Http.post(api.START_CHAT_API, data);\r\n  if (result.code === 0) {\r\n    return result.data;\r\n  } else {\r\n    return result.message;\r\n  }\r\n};\r\n\r\n//结束聊天，保存聊天记录\r\nexport const requestEndChat = async data => {\r\n  let result = await Http.post(api.END_CHAT_API, data);\r\n  if (result.code === 0) {\r\n    return \"ok\";\r\n  } else {\r\n    return result.message;\r\n  }\r\n};\r\n\r\n//请求信息列表\r\nexport const requestMessageList = async data => {\r\n  let result = await Http.get(api.MESSAGE_LIST_API, data);\r\n  if (result.code === 0) {\r\n    return result.data;\r\n  } else {\r\n    return result.message;\r\n  }\r\n};\r\n\r\nexport default {\r\n  requestStartChat\r\n};\r\n","import React,{useCallback,useState,memo} from \"react\";\r\n\r\nconst item =memo(props => {\r\n  let { item,history } = props;\r\n\r\n\r\n  const [time, setTime] = useState(\"\");\r\n\r\n\r\n\r\n//   let toChatAction = useCallback(() => {\r\n//     history.push('/chat/'+item.info._id);\r\n//   }, [item.info._id]);\r\n\r\n\r\nlet toChatAction=()=>{\r\n    history.push('/chat/'+item.info._id);\r\n}\r\n\r\n  return (\r\n    <div className=\"item\" onClick={toChatAction}>\r\n      <img\r\n        src={item.info.averImg || \"https://m.baidu.com/se/static/wiseatom/personalcenter/assets/img/default_icon_02f13d8.png\"}\r\n        alt={item.info.name}\r\n      />\r\n      <div className=\"item-right\">\r\n        <h3>{item.info.name}</h3>\r\n        <span>{item.value}</span>\r\n        <i>{time}</i>\r\n      </div>\r\n    </div>\r\n  );\r\n})\r\n\r\nexport default item;\r\n","import React, { memo, useState, useCallback, useEffect } from \"react\";\r\nimport \"./style.scss\";\r\nimport Search from \"components/Search/Search\";\r\nimport Scroll from \"components/Scroll/Scroll\";\r\nimport Item from \"./children/item\";\r\nimport { requestMessageList } from \"services/MessageServices\";\r\nimport { requestFriendBy_ID } from \"services/UserServices\";\r\nimport { useSelector} from 'react-redux'\r\nimport { websocketSelector} from '../../../store'\r\n\r\nconst message = memo(props => {\r\n\r\n\r\nconst websocket=useSelector(websocketSelector);\r\n\r\n  // const [currentCity, setCurrentCity] = useState(\"\");\r\n  let [date, setDate] = useState(\"\");\r\n  let [day, setDay] = useState(\"\");\r\n  let [messageList, setMessageList] = useState([]);\r\n  // let [filterList, setFilterList] = useState([]);\r\n  let [info, setInfo] = useState(() => {\r\n    return JSON.parse(localStorage.getItem(\"userInfo\"));\r\n  });\r\n  let [newMessage,setNewMessage]=useState([]);\r\n\r\n  // const filterListAction = useCallback(ev => {\r\n  //   setFilterList([...list]) \r\n  // }, [filterList]);\r\n\r\n  useEffect(() => {\r\n    const d = new Date();\r\n    let month = d.getMonth();\r\n    let date = d.getDate();\r\n    let day = d.getDay();\r\n    let datArr = [\"周日\", \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\"];\r\n\r\n    setDate(month + 1 + \"月\" + date + \"日\");\r\n    setDay(datArr[day]);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    //获取当前城市\r\n    // let geolocation = new BMap.Geolocation();\r\n    // geolocation.getCurrentPosition(function(r) {\r\n    //   if (this.getStatus() == BMAP_STATUS_SUCCESS) {\r\n    //     let city = r.address.city; //返回当前城市\r\n    //     city = city.substr(0, city.length - 1);\r\n    //     setCurrentCity(city);\r\n    //   }\r\n    // });\r\n  }, []);\r\n\r\n\r\n  useEffect(()=>{\r\n    websocket.onmessage = ev => {\r\n      let data= JSON.parse(ev.data);\r\n      console.log(data);\r\n\r\n      if (data.status === \"ok\") {\r\n        //是你自己发送的，发送成功了\r\n        this.scroll.scroll.refresh();\r\n        this.scroll.scroll.scrollTo(\r\n          0,\r\n          this.scroll.scroll.maxScrollY,\r\n          1,\r\n          \"linear\"\r\n        );\r\n      } else {\r\n        let messagelist = [\r\n          ...newMessage,\r\n          {\r\n            ...data\r\n          }\r\n        ];\r\n        const unique = (arr, key) => {\r\n          //去重\r\n          const res = new Map();\r\n          return arr.filter(a => !res.has(a[key]) && res.set(a[key], 1));\r\n        };\r\n\r\n        newMessage=unique(messagelist,'time');\r\n        setNewMessage([...messagelist]);\r\n      }\r\n    };\r\n  },[]);\r\n\r\n  const initData = async () => {\r\n    let result = await requestMessageList({    //获取自己相关信息列表\r\n      _id: info._id\r\n    });\r\n\r\n\r\n\r\n    console.log(result);\r\n  \r\n    for(let i=0;i<newMessage.length;i++){\r\n      for(let j=0;j<result.length;j++){\r\n        if(newMessage[i].gulp===result[j].gulp){\r\n          result[j]=newMessage[i];\r\n        }\r\n      }\r\n    }\r\n    \r\n    console.log(result);\r\n    \r\n\r\n\r\n    let newArr = result.map(async item => {   //  获取信息列表中的好友信息，添加到信息列表对应对象中\r\n      let friend_id = item.sendId === info._id ? item.toId : item.sendId;\r\n      let friend_info = await requestFriendBy_ID({\r\n        _id: friend_id\r\n      });\r\n      item.info = friend_info;\r\n      return item;\r\n    });\r\n\r\n    let res = await Promise.all(newArr);\r\n\r\n\r\n\r\n\r\n    setMessageList([...res]);  \r\n  };\r\n\r\n  useEffect(() => {\r\n    initData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"page\" id=\"message\">\r\n      <header className=\"message-top\">\r\n        <div className=\"message-top-one\">\r\n          <span className=\"city\">深圳</span>\r\n          <span className=\"data\">{date}</span>\r\n          <span className=\"day\">{day}</span>\r\n        </div>\r\n        <div className=\"message-top-two\">\r\n          <h1>信息</h1>\r\n          <div className=\"scan\">\r\n            <i className=\"iconfont icon-saoyisao\"></i>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <Search List={messageList} sendFilterList={(list)=>{\r\n        {/* setFilterList([...list]); */}\r\n        }} />\r\n\r\n      <Scroll>\r\n        <div className=\"cont\">\r\n          {messageList.map(mess => {\r\n            return <Item item={mess} key={mess._id} history={props.history} />;\r\n          })}\r\n        </div>\r\n      </Scroll>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default message;\r\n"],"sourceRoot":""}