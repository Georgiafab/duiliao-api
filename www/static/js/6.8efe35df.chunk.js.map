{"version":3,"sources":["utils/Http.js","utils/api.js","services/UserServices.js","components/Scroll/Scroll.js","components/Search/Search.js","pages/user/user/user.js"],"names":["Http","url","data","params","Object","entries","reduce","arr","k","v","concat","encodeURIComponent","join","window","fetch","response","json","Error","method","headers","body","JSON","stringify","res","REGIESTER_API","LOGIN_API","CHECK_LOGIN","LOGOUT_API","FIND_FRIEND_BY_KEY_API","FIND_FRIEND_BY__id_API","ADD_FRIEND_API","IS_FRIEND_API","FRIEND_LIST_API","START_CHAT_API","END_CHAT_API","MESSAGE_LIST_API","requestFriendByKey","a","post","api","result","code","message","requestFriendBy_ID","get","requestAddFriend","requestIsFriend","requestFriendList","scroll","props","state","className","ref","scrDom","this","children","BScroll","tap","click","on","refresh","React","Component","Search","type","placeholder","onKeyUp","searchAction","bind","ev","persist","val","target","value","list","List","filter","item","name","indexOf","sendFilterList","lazy","statusLis","id","text","user","status","friendList","filterList","map","key","onClick","changeStatusAction","to","filterListAction","Suspense","fullback","setState","friendArr","push","friend_id","newArr","_id","Promise","all","initdata"],"mappings":"yLA2DuBA,G,gJAEFC,EAAIC,G,kFAEbC,EAASC,OAAOC,QAAQH,GAAMI,QAAO,SAACC,EAAD,0BAAOC,EAAP,KAAUC,EAAV,YAAiBF,EAAIG,OAAOC,mBAAmBH,GAAK,IAAMG,mBAAmBF,MAAK,IAAIG,KAAK,K,kBAK3GC,OAAOC,MAAMb,EAAI,IAAIE,G,cAAtCY,E,gBACaA,EAASC,O,cAAtBd,E,yBAGGA,G,wCAED,IAAIe,MAAJ,M,uLAIIhB,EAAIC,G,kGAGOY,MAAMb,EAAI,CAC3BiB,OAAO,OACPC,QAAQ,CAAC,eAAgB,oBACzBC,KAAKC,KAAKC,UAAUpB,K,cAHpBa,E,gBAKUA,EAASC,O,cAAnBO,E,yBACGA,G,wCAED,IAAIN,MAAJ,M,4JCAH,KACXO,cAhFuB,sBAiFvBC,UA1EmB,kBA2EnBC,YArEqB,wBAsErBC,WAhEoB,mBAiEpBC,uBA3DgC,+BA4DhCC,uBArDgC,+BAsDhCC,eA/CwB,wBAgDxBC,cAxCuB,uBAyCvBC,gBAjCyB,kCAkCzBC,eA3BsB,0BA4BtBC,aArBoB,wBAsBpBC,iBAhBwB,8B,uPChFfC,EAAkB,uCAAG,WAAOlC,GAAP,eAAAmC,EAAA,sEACXrC,IAAKsC,KAAKC,IAAIX,uBAAwB1B,GAD3B,UAGX,KAFfsC,EAD0B,QAGpBC,KAHoB,yCAIrBD,EAAOtC,MAJc,gCAMrBsC,EAAOE,SANc,2CAAH,sDAYhBC,EAAkB,uCAAG,WAAOzC,GAAP,eAAAmC,EAAA,sEACbrC,IAAK4C,IAAIL,IAAIV,uBAAwB3B,GADxB,UAGb,KAFfsC,EAD4B,QAGtBC,KAHsB,yCAIvBD,EAAOtC,MAJgB,gCAMvBsC,EAAOE,SANgB,2CAAH,sDAYjBG,EAAgB,uCAAG,WAAO3C,GAAP,eAAAmC,EAAA,sEACZrC,IAAKsC,KAAKC,IAAIT,eAAgB5B,GADlB,UAGZ,KAFfsC,EAD2B,QAGrBC,KAHqB,yCAItBD,GAJsB,gCAMtBA,EAAOE,SANe,2CAAH,sDAWjBI,EAAe,uCAAG,WAAO5C,GAAP,eAAAmC,EAAA,sEACVrC,IAAKsC,KAAKC,IAAIR,cAAe7B,GADnB,UAGV,KAFfsC,EADyB,QAGnBC,KAHmB,yCAIpBD,GAJoB,gCAMpBA,EAAOE,SANa,2CAAH,sDAWbK,EAAiB,uCAAG,WAAO7C,GAAP,eAAAmC,EAAA,sEACZrC,IAAK4C,IAAIL,IAAIP,gBAAiB9B,GADlB,UAGZ,KAFfsC,EAD2B,QAGrBC,KAHqB,yCAItBD,EAAOtC,MAJe,gCAMtBsC,EAAOE,SANe,2CAAH,uD,mGC/C5BM,G,kBACN,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,GAHE,E,sEAOL,IAAD,OACL,OACI,yBAAKC,UAAU,aAAaC,IAAK,SAACC,GAC9B,EAAKA,OAAOA,IAEZ,yBAAKF,UAAU,cACVG,KAAKL,MAAMM,a,0CAMR,IAAD,OAEfD,KAAKN,OAAS,IAAIQ,IAAQF,KAAKD,OAAQ,CACnCI,KAAK,EACLC,OAAO,IAGXJ,KAAKN,OAAOW,GAAG,qBAAqB,WAChC,EAAKX,OAAOY,iB,GA5BHC,IAAMC,YAoCZd,O,gHCrCTe,G,kBACJ,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,GAHI,E,sEAOjB,OACE,6BACE,yBAAKC,UAAU,UACb,uBAAGA,UAAU,yBACb,2BACEa,KAAK,OACLC,YAAY,eACZC,QAASZ,KAAKa,aAAaC,KAAKd,Y,mCAU7Be,GACXA,EAAGC,UACH,IAAIC,EAAIF,EAAGG,OAAOC,MAEdC,EAAKpB,KAAKL,MAAM0B,KAAKC,QAAO,SAAAC,GAC5B,OAAOA,EAAKC,KAAKC,QAAQR,IAAQ,KAGrCjB,KAAKL,MAAM+B,eAAeN,O,GAjCTb,IAAMC,YAsCZC,O,6NCjCTY,EAAOd,IAAMoB,MAAK,kBAAM,iCAE1BC,EAAY,CACd,CACEC,GAAI,EACJC,KAAM,gBAER,CACED,GAAI,EACJC,KAAM,iBAIJC,E,YACJ,WAAYpC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXoC,OAAQ,EACRC,WAAY,GACZC,WAAY,IANG,E,sEAUT,IAAD,SACkClC,KAAKJ,MAAxCoC,EADC,EACDA,OAAQE,EADP,EACOA,WAAYD,EADnB,EACmBA,WAC1B,OACE,yBAAKpC,UAAU,OAAOgC,GAAG,QACvB,4BAAQhC,UAAU,YAChB,4CACA,yBAAKA,UAAU,gBACZ+B,EAAUO,KAAI,SAAAZ,GACb,OACE,0BACE1B,UAAWmC,IAAWT,EAAKM,GAAK,SAAW,GAC3CO,IAAKb,EAAKM,GACVQ,QAAS,EAAKC,mBAAmBxB,KAAK,EAAMS,EAAKM,KAEhDN,EAAKO,KAAM,QAKlB,kBAAC,IAAD,CAAMS,GAAG,aACP,uBAAG1C,UAAU,yBAKnB,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CACEwB,KAAMY,EACNP,eAAgB1B,KAAKwC,iBAAiB1B,KAAKd,QAE7C,kBAAC,IAAMyC,SAAP,CACEC,SAAU,kBAAC,IAAD,QAEZ,kBAACrB,EAAD,eAAMY,WAAYC,GAAgBlC,KAAKL,a,yCAM9BkC,GACjB7B,KAAK2C,SAAS,CACZX,OAAQH,M,uKAKWpC,YAAkB,CACrCoC,GAAI,K,cADA3C,E,OAOF0D,EAAY,GAChB1D,EAAOiD,KAAI,SAAAZ,GACTqB,EAAUC,KAAKtB,EAAKuB,cAIlBC,EAASH,EAAUT,IAAV,uCAAc,WAAMa,GAAN,SAAAjE,EAAA,+EAClBM,YAAmB,CACxB2D,IAAKA,KAFkB,2CAAd,uD,SAKGC,QAAQC,IAAIH,G,OAAxB9E,E,OAGJ+B,KAAK2C,SAAS,CACZV,WAAW,GAAD,mBAAMjC,KAAKJ,MAAMqC,YAAjB,YAAgChE,IAC1CiE,WAAW,YAAKjE,K,8IAIHmD,GACfpB,KAAK2C,SAAS,CACZT,WAAW,YAAKd,O,0CAIlBpB,KAAKmD,e,GA3FU5C,IAAMC,WA+FVuB","file":"static/js/6.8efe35df.chunk.js","sourcesContent":["// // 提供fetch请求\r\n// // 对fetch进行二次封装\r\n\r\n// import \"whatwg-fetch\";\r\n\r\n// // fetch();\r\n\r\n// export default class Http {\r\n//   static async request(method, url, data) {\r\n//     console.log(data);\r\n//     //get方法的参数直接接在url的后面\r\n//     let dataStr = \"?\";\r\n//     Object.keys(data).map(key => {\r\n//       dataStr += key + \"=\" + data[key];\r\n//     });\r\n\r\n//     //只有post方法有配置项\r\n    \r\n//     let option= method === \"POST\"?{\r\n//         method,\r\n//         headers: {\r\n//           'Content-Type': 'application/json'\r\n//         },\r\n//         body: JSON.stringify(data)\r\n//     }:{};\r\n\r\n//     url = method === \"GET\" ? url + \"?\" + dataStr : url;\r\n\r\n//     const response = await window.fetch(url,option);\r\n\r\n//     return this.isSuccess(response);\r\n//   }\r\n\r\n//   // 判断响应结果是否成功\r\n//   static isSuccess(res) {\r\n//     if (res.status >= 200 && res.status < 300) {\r\n//       return res.json();   //格式化数据\r\n//     } else {\r\n//       this.requestExpection(res);\r\n//     }\r\n//   }\r\n\r\n//   // 构建失败对象\r\n//   static requestExpection(res) {\r\n//     throw new Error(res);\r\n//   }\r\n\r\n//   static get(url, data) {\r\n//     return this.request(\"GET\", url, data);\r\n//   }\r\n\r\n//   // post便捷方法\r\n//   static post(url, data) {\r\n//     return this.request(\"POST\", url, data);\r\n//   }\r\n// }\r\n\r\nimport 'whatwg-fetch'\r\n\r\n  export default class Http{\r\n\r\n    static async get(url,data){\r\n\r\n        let params = Object.entries(data).reduce((arr, [k, v]) => arr.concat(encodeURIComponent(k) + '=' + encodeURIComponent(v)), []).join('&')\r\n        // console.log(url+'?'+params);\r\n        \r\n\r\n        try{\r\n            let response = await window.fetch(url+'?'+params);\r\n            let data = await response.json();\r\n\r\n            \r\n            return data\r\n        } catch(error){\r\n            throw new Error(error)\r\n        }\r\n    }\r\n\r\n    static async post(url,data){\r\n        try{\r\n          // console.log(data);\r\n            let response = await fetch(url,{\r\n                method:'POST',\r\n                headers:{'Content-Type': 'application/json'},\r\n                body:JSON.stringify(data)\r\n            })\r\n            let res=await response.json();\r\n            return res;\r\n        }catch(error){\r\n            throw new Error(error)\r\n        }\r\n    }\r\n  }\r\n","// 管理api\r\nexport const HOST = '';\r\n\r\n\r\n\r\n/* \r\n#### 注册\r\n**method:** post\r\n**参数:** tel      password\r\n*/\r\nconst REGIESTER_API = HOST+'/api/user/regiester';\r\n\r\n/* \r\n#### 登录\r\n**method:** post\r\n**参数:** tel   type('code',  'password' )  value \r\n*/\r\nconst LOGIN_API = HOST+'/api/user/login';\r\n\r\n/*\r\n检查登录\r\n参数：无\r\n*/\r\nconst CHECK_LOGIN = HOST+'/api/user/check_login'\r\n\r\n/*\r\n退出登录\r\n参数：无\r\n*/\r\nconst LOGOUT_API = HOST+'/api/user/logout';\r\n\r\n/*\r\n关键字搜索好友\r\n参数：key\r\n*/\r\nconst FIND_FRIEND_BY_KEY_API = HOST+'/api/user/find_friend_by_key';\r\n\r\n\r\n/*\r\n_id获取好友详细信息\r\n参数：friend_id\r\n*/\r\nconst FIND_FRIEND_BY__id_API = HOST+'/api/user/find_friend_by__id';\r\n\r\n\r\n/*\r\n添加好友\r\n参数：friend_id\r\n*/\r\nconst ADD_FRIEND_API = HOST+'/api/friend/addfriend';\r\n\r\n\r\n\r\n/*\r\n判断是否为好友\r\n参数：friend_id\r\n*/\r\nconst IS_FRIEND_API = HOST+'/api/friend/isfriend';\r\n\r\n\r\n\r\n/*\r\n请求好友列表\r\n参数：null\r\n*/\r\nconst FRIEND_LIST_API = HOST+'/api/friend/find_friend_by_user';\r\n\r\n\r\n/*\r\n开始聊天，请求聊天记录\r\n参数：_id, friend_id\r\n*/\r\nconst START_CHAT_API=HOST+'/api/message/start_chat';\r\n\r\n\r\n/*\r\n结束聊天，保存聊天记录\r\n参数：_id, friend_id\r\n*/\r\nconst END_CHAT_API=HOST+'/api/message/end_chat';\r\n\r\n/*\r\n请求信息列表\r\n参数：_id\r\n*/\r\nconst MESSAGE_LIST_API=HOST+'/api/message/messgae_list';\r\n\r\n\r\n\r\nexport default {\r\n    REGIESTER_API,\r\n    LOGIN_API,\r\n    CHECK_LOGIN,\r\n    LOGOUT_API,\r\n    FIND_FRIEND_BY_KEY_API,\r\n    FIND_FRIEND_BY__id_API,\r\n    ADD_FRIEND_API,\r\n    IS_FRIEND_API,\r\n    FRIEND_LIST_API,\r\n    START_CHAT_API,\r\n    END_CHAT_API,\r\n    MESSAGE_LIST_API\r\n}","import Http from '../utils/Http'\r\nimport api from '../utils/api'\r\n\r\n\r\n// 关键字搜索好友列表\r\nexport const requestFriendByKey = async (data)=>{\r\n    let result = await Http.post(api.FIND_FRIEND_BY_KEY_API, data);\r\n\r\n    if(result.code === 0){\r\n      return result.data\r\n    }else{\r\n      return result.message;\r\n    }\r\n  }\r\n\r\n  \r\n  //请求用户详细信息\r\n  export const requestFriendBy_ID = async (data)=>{\r\n    let result = await Http.get(api.FIND_FRIEND_BY__id_API, data);\r\n\r\n    if(result.code === 0){\r\n      return result.data\r\n    }else{\r\n      return result.message;\r\n    }\r\n  }\r\n\r\n\r\n   //请求添加好友\r\n   export const requestAddFriend = async (data)=>{\r\n    let result = await Http.post(api.ADD_FRIEND_API, data);\r\n\r\n    if(result.code === 0){\r\n      return result\r\n    }else{\r\n      return result.message;\r\n    }\r\n  }\r\n\r\n  //查询是否为好友\r\n  export const requestIsFriend = async (data)=>{\r\n    let result = await Http.post(api.IS_FRIEND_API, data);\r\n\r\n    if(result.code === 0){\r\n      return result\r\n    }else{\r\n      return result.message;\r\n    }\r\n  }\r\n\r\n    //请求好友列表\r\n    export const requestFriendList = async (data)=>{\r\n      let result = await Http.get(api.FRIEND_LIST_API, data);\r\n  \r\n      if(result.code === 0){\r\n        return result.data\r\n      }else{\r\n        return result.message;\r\n      }\r\n    }\r\n\r\n\r\n  export default{\r\n    requestFriendByKey,\r\n    requestFriendBy_ID,\r\n    requestAddFriend,\r\n    requestIsFriend,\r\n    requestFriendList\r\n  }\r\n  ","import React from 'react';\r\nimport BScroll from 'better-scroll'\r\nimport './style.scss'\r\n\r\nclass scroll extends React.Component {\r\nconstructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n    };\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app-scroll\" ref={(scrDom)=>{\r\n                this.scrDom=scrDom\r\n            }}>\r\n                <div className=\"scoll-wrap\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidMount(){\r\n         // 创建滚动视图\r\n        this.scroll = new BScroll(this.scrDom, {\r\n            tap: true,\r\n            click: true\r\n        });\r\n        // 如果需要滚动，先刷新滚动视图，就可以在可滚动范围内滚动\r\n        this.scroll.on('beforeScrollStart', ()=>{\r\n            this.scroll.refresh();\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default scroll;","import React from \"react\";\r\nimport './style.scss'\r\n\r\nclass Search extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"search\">\r\n          <i className=\"iconfont icon-sousuo\"></i>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"搜索\"\r\n            onKeyUp={this.searchAction.bind(this)}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n  searchAction(ev){\r\n    ev.persist();\r\n    let val=ev.target.value;\r\n\r\n    let list=this.props.List.filter(item=>{\r\n        return item.name.indexOf(val) > -1;\r\n    });\r\n    \r\n    this.props.sendFilterList(list);\r\n\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport \"./style.scss\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Search from \"components/Search/Search\";\r\nimport Loading from \"components/Loading/Loading\";\r\nimport Scroll from \"components/Scroll/Scroll\";\r\nimport { requestFriendList, requestFriendBy_ID } from \"services/UserServices\";\r\n\r\nconst List = React.lazy(() => import(\"./children/list\"));\r\n\r\nlet statusLis = [\r\n  {\r\n    id: 0,\r\n    text: \"好友\"\r\n  },\r\n  {\r\n    id: 1,\r\n    text: \"群聊\"\r\n  }\r\n];\r\n\r\nclass user extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      status: 0,\r\n      friendList: [],\r\n      filterList: []\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let { status, filterList, friendList } = this.state;\r\n    return (\r\n      <div className=\"page\" id=\"user\">\r\n        <header className=\"user-top\">\r\n          <h1>朋友</h1>\r\n          <div className=\"user-top-one\">\r\n            {statusLis.map(item => {\r\n              return (\r\n                <span\r\n                  className={status === item.id ? \"active\" : \"\"}\r\n                  key={item.id}\r\n                  onClick={this.changeStatusAction.bind(this, item.id)}\r\n                >\r\n                  {item.text}{\" \"}\r\n                </span>\r\n              );\r\n            })}\r\n\r\n            <Link to=\"/user/add\">\r\n              <i className=\"iconfont icon-jia\"></i>\r\n            </Link>\r\n          </div>\r\n        </header>\r\n\r\n        <Scroll>\r\n          <div>\r\n            <Search\r\n              List={friendList}\r\n              sendFilterList={this.filterListAction.bind(this)}\r\n            />\r\n            <React.Suspense\r\n              fullback={<Loading />}\r\n            ></React.Suspense>\r\n            <List friendList={filterList} {...this.props} />\r\n          </div>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n  changeStatusAction(id) {\r\n    this.setState({\r\n      status: id\r\n    });\r\n  }\r\n\r\n  async initdata() {\r\n    const result = await requestFriendList({\r\n      id: \"\"\r\n    });\r\n\r\n\r\n\r\n    //获取所有好友的ID\r\n    let friendArr = [];\r\n    result.map(item => {\r\n      friendArr.push(item.friend_id);\r\n    });\r\n\r\n    // 根据好友ID查找详细信息\r\n    let newArr = friendArr.map(async _id => {\r\n      return requestFriendBy_ID({\r\n        _id: _id\r\n      });\r\n    });\r\n    let res = await Promise.all(newArr);\r\n    // console.log(result);\r\n\r\n    this.setState({\r\n      friendList: [...this.state.friendList, ...res],\r\n      filterList: [...res]\r\n    });\r\n  }\r\n\r\n  filterListAction(list) {\r\n    this.setState({\r\n      filterList: [...list]\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    this.initdata();\r\n  }\r\n}\r\n\r\nexport default user;\r\n"],"sourceRoot":""}