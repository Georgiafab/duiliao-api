{"version":3,"sources":["utils/Http.js","utils/api.js","services/UserServices.js","components/Scroll/Scroll.js","services/MessageServices.js","pages/common/chat/chat.js"],"names":["Http","url","data","params","Object","entries","reduce","arr","k","v","concat","encodeURIComponent","join","window","fetch","response","json","Error","method","headers","body","JSON","stringify","res","REGIESTER_API","LOGIN_API","CHECK_LOGIN","LOGOUT_API","FIND_FRIEND_BY_KEY_API","FIND_FRIEND_BY__id_API","ADD_FRIEND_API","IS_FRIEND_API","FRIEND_LIST_API","START_CHAT_API","END_CHAT_API","MESSAGE_LIST_API","requestFriendByKey","a","post","api","result","code","message","requestFriendBy_ID","get","requestAddFriend","requestIsFriend","requestFriendList","scroll","props","state","className","ref","scrDom","this","children","BScroll","tap","click","on","refresh","React","Component","requestStartChat","requestEndChat","requestMessageList","Chat","websocket","newMessageList","_id","user_info","messageList","myInfo","newMessage","console","log","id","title","name","hasmore","moreAction","sendMoreAction","bind","el","map","item","index","length","time","key","mathTime","sendId","src","averImg","alt","send","value","type","onKeyUp","sendMessageAction","nowT","qualifier","t","parseInt","d","Date","now","toLocaleDateString","getHours","getMinutes","getSeconds","getFullYear","getMonth","getDate","history","push","setState","sort","gulp","toString","friend_id","ev","persist","keyCode","scrollTo","maxScrollY","target","arerImg","toId","alert","match","userId","Info","parse","localStorage","getItem","initChat","initData","onmessage","status","Map","filter","has","set","unique","endChat","connect","dispatch"],"mappings":"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","file":"static/js/7.aecb9e3a.chunk.js","sourcesContent":["// // 提供fetch请求\r\n// // 对fetch进行二次封装\r\n\r\n// import \"whatwg-fetch\";\r\n\r\n// // fetch();\r\n\r\n// export default class Http {\r\n//   static async request(method, url, data) {\r\n//     console.log(data);\r\n//     //get方法的参数直接接在url的后面\r\n//     let dataStr = \"?\";\r\n//     Object.keys(data).map(key => {\r\n//       dataStr += key + \"=\" + data[key];\r\n//     });\r\n\r\n//     //只有post方法有配置项\r\n    \r\n//     let option= method === \"POST\"?{\r\n//         method,\r\n//         headers: {\r\n//           'Content-Type': 'application/json'\r\n//         },\r\n//         body: JSON.stringify(data)\r\n//     }:{};\r\n\r\n//     url = method === \"GET\" ? url + \"?\" + dataStr : url;\r\n\r\n//     const response = await window.fetch(url,option);\r\n\r\n//     return this.isSuccess(response);\r\n//   }\r\n\r\n//   // 判断响应结果是否成功\r\n//   static isSuccess(res) {\r\n//     if (res.status >= 200 && res.status < 300) {\r\n//       return res.json();   //格式化数据\r\n//     } else {\r\n//       this.requestExpection(res);\r\n//     }\r\n//   }\r\n\r\n//   // 构建失败对象\r\n//   static requestExpection(res) {\r\n//     throw new Error(res);\r\n//   }\r\n\r\n//   static get(url, data) {\r\n//     return this.request(\"GET\", url, data);\r\n//   }\r\n\r\n//   // post便捷方法\r\n//   static post(url, data) {\r\n//     return this.request(\"POST\", url, data);\r\n//   }\r\n// }\r\n\r\nimport 'whatwg-fetch'\r\n\r\n  export default class Http{\r\n\r\n    static async get(url,data){\r\n\r\n        let params = Object.entries(data).reduce((arr, [k, v]) => arr.concat(encodeURIComponent(k) + '=' + encodeURIComponent(v)), []).join('&')\r\n        // console.log(url+'?'+params);\r\n        \r\n\r\n        try{\r\n            let response = await window.fetch(url+'?'+params);\r\n            let data = await response.json();\r\n\r\n            \r\n            return data\r\n        } catch(error){\r\n            throw new Error(error)\r\n        }\r\n    }\r\n\r\n    static async post(url,data){\r\n        try{\r\n          // console.log(data);\r\n            let response = await fetch(url,{\r\n                method:'POST',\r\n                headers:{'Content-Type': 'application/json'},\r\n                body:JSON.stringify(data)\r\n            })\r\n            let res=await response.json();\r\n            return res;\r\n        }catch(error){\r\n            throw new Error(error)\r\n        }\r\n    }\r\n  }\r\n","// 管理api\r\nexport const HOST = '';\r\n\r\n\r\n\r\n/* \r\n#### 注册\r\n**method:** post\r\n**参数:** tel      password\r\n*/\r\nconst REGIESTER_API = HOST+'/api/user/regiester';\r\n\r\n/* \r\n#### 登录\r\n**method:** post\r\n**参数:** tel   type('code',  'password' )  value \r\n*/\r\nconst LOGIN_API = HOST+'/api/user/login';\r\n\r\n/*\r\n检查登录\r\n参数：无\r\n*/\r\nconst CHECK_LOGIN = HOST+'/api/user/check_login'\r\n\r\n/*\r\n退出登录\r\n参数：无\r\n*/\r\nconst LOGOUT_API = HOST+'/api/user/logout';\r\n\r\n/*\r\n关键字搜索好友\r\n参数：key\r\n*/\r\nconst FIND_FRIEND_BY_KEY_API = HOST+'/api/user/find_friend_by_key';\r\n\r\n\r\n/*\r\n_id获取好友详细信息\r\n参数：friend_id\r\n*/\r\nconst FIND_FRIEND_BY__id_API = HOST+'/api/user/find_friend_by__id';\r\n\r\n\r\n/*\r\n添加好友\r\n参数：friend_id\r\n*/\r\nconst ADD_FRIEND_API = HOST+'/api/friend/addfriend';\r\n\r\n\r\n\r\n/*\r\n判断是否为好友\r\n参数：friend_id\r\n*/\r\nconst IS_FRIEND_API = HOST+'/api/friend/isfriend';\r\n\r\n\r\n\r\n/*\r\n请求好友列表\r\n参数：null\r\n*/\r\nconst FRIEND_LIST_API = HOST+'/api/friend/find_friend_by_user';\r\n\r\n\r\n/*\r\n开始聊天，请求聊天记录\r\n参数：_id, friend_id\r\n*/\r\nconst START_CHAT_API=HOST+'/api/message/start_chat';\r\n\r\n\r\n/*\r\n结束聊天，保存聊天记录\r\n参数：_id, friend_id\r\n*/\r\nconst END_CHAT_API=HOST+'/api/message/end_chat';\r\n\r\n/*\r\n请求信息列表\r\n参数：_id\r\n*/\r\nconst MESSAGE_LIST_API=HOST+'/api/message/messgae_list';\r\n\r\n\r\n\r\nexport default {\r\n    REGIESTER_API,\r\n    LOGIN_API,\r\n    CHECK_LOGIN,\r\n    LOGOUT_API,\r\n    FIND_FRIEND_BY_KEY_API,\r\n    FIND_FRIEND_BY__id_API,\r\n    ADD_FRIEND_API,\r\n    IS_FRIEND_API,\r\n    FRIEND_LIST_API,\r\n    START_CHAT_API,\r\n    END_CHAT_API,\r\n    MESSAGE_LIST_API\r\n}","import Http from '../utils/Http'\r\nimport api from '../utils/api'\r\n\r\n\r\n// 关键字搜索好友列表\r\nexport const requestFriendByKey = async (data)=>{\r\n    let result = await Http.post(api.FIND_FRIEND_BY_KEY_API, data);\r\n\r\n    if(result.code === 0){\r\n      return result.data\r\n    }else{\r\n      return result.message;\r\n    }\r\n  }\r\n\r\n  \r\n  //请求用户详细信息\r\n  export const requestFriendBy_ID = async (data)=>{\r\n    let result = await Http.get(api.FIND_FRIEND_BY__id_API, data);\r\n\r\n    if(result.code === 0){\r\n      return result.data\r\n    }else{\r\n      return result.message;\r\n    }\r\n  }\r\n\r\n\r\n   //请求添加好友\r\n   export const requestAddFriend = async (data)=>{\r\n    let result = await Http.post(api.ADD_FRIEND_API, data);\r\n\r\n    if(result.code === 0){\r\n      return result\r\n    }else{\r\n      return result.message;\r\n    }\r\n  }\r\n\r\n  //查询是否为好友\r\n  export const requestIsFriend = async (data)=>{\r\n    let result = await Http.post(api.IS_FRIEND_API, data);\r\n\r\n    if(result.code === 0){\r\n      return result\r\n    }else{\r\n      return result.message;\r\n    }\r\n  }\r\n\r\n    //请求好友列表\r\n    export const requestFriendList = async (data)=>{\r\n      let result = await Http.get(api.FRIEND_LIST_API, data);\r\n  \r\n      if(result.code === 0){\r\n        return result.data\r\n      }else{\r\n        return result.message;\r\n      }\r\n    }\r\n\r\n\r\n  export default{\r\n    requestFriendByKey,\r\n    requestFriendBy_ID,\r\n    requestAddFriend,\r\n    requestIsFriend,\r\n    requestFriendList\r\n  }\r\n  ","import React from 'react';\r\nimport BScroll from 'better-scroll'\r\nimport './style.scss'\r\n\r\nclass scroll extends React.Component {\r\nconstructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n    };\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app-scroll\" ref={(scrDom)=>{\r\n                this.scrDom=scrDom\r\n            }}>\r\n                <div className=\"scoll-wrap\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidMount(){\r\n         // 创建滚动视图\r\n        this.scroll = new BScroll(this.scrDom, {\r\n            tap: true,\r\n            click: true\r\n        });\r\n        // 如果需要滚动，先刷新滚动视图，就可以在可滚动范围内滚动\r\n        this.scroll.on('beforeScrollStart', ()=>{\r\n            this.scroll.refresh();\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default scroll;","import Http from \"../utils/Http\";\r\nimport api from \"../utils/api\";\r\n\r\n// 开始聊天，请求聊天记录\r\nexport const requestStartChat = async data => {\r\n  let result = await Http.post(api.START_CHAT_API, data);\r\n  if (result.code === 0) {\r\n    return result.data;\r\n  } else {\r\n    return result.message;\r\n  }\r\n};\r\n\r\n//结束聊天，保存聊天记录\r\nexport const requestEndChat = async data => {\r\n  let result = await Http.post(api.END_CHAT_API, data);\r\n  if (result.code === 0) {\r\n    return \"ok\";\r\n  } else {\r\n    return result.message;\r\n  }\r\n};\r\n\r\n//请求信息列表\r\nexport const requestMessageList = async data => {\r\n  let result = await Http.get(api.MESSAGE_LIST_API, data);\r\n  if (result.code === 0) {\r\n    return result.data;\r\n  } else {\r\n    return result.message;\r\n  }\r\n};\r\n\r\nexport default {\r\n  requestStartChat\r\n};\r\n","import React from \"react\";\r\nimport \"./style.scss\";\r\nimport Header from \"components/Header/Header\";\r\nimport Scroll from \"components/Scroll/Scroll\";\r\nimport { requestFriendBy_ID } from \"services/UserServices\";\r\nimport { requestStartChat, requestEndChat } from \"services/MessageServices\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Chat extends React.Component {\r\n  // websocket = new WebSocket(\"ws://10.20.152.22:3000\");\r\n  websocket = this.props.websocket;\r\n  newMessageList = this.props.newMessageList;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      _id: \"\",\r\n      user_info: {},\r\n      messageList: [],\r\n      myInfo: {},\r\n      newMessage: []\r\n    };\r\n  }\r\n  render() {\r\n    let { user_info, messageList, myInfo } = this.state;\r\n\r\n    console.log(this.newMessageList);\r\n    return (\r\n      <div className=\"page-wrap\">\r\n        <div className=\"page\" id=\"chat\">\r\n          <Header\r\n            title={user_info.name}\r\n            {...this.props}\r\n            hasmore={true}\r\n            moreAction={this.sendMoreAction.bind(this)}\r\n          />\r\n\r\n          <Scroll\r\n            ref={el => {\r\n              this.scroll = el;\r\n            }}\r\n          >\r\n            <div className=\"cont\">\r\n              <div className=\"name\">{user_info.name}</div>\r\n\r\n              <div className=\"talk-box\">\r\n                <ul className=\"clear\">\r\n                  {messageList.map((item, index) => {\r\n                    return (\r\n                      <>\r\n                        {index >= 1 &&\r\n                          index < messageList.length - 1 &&\r\n                          item.time - messageList[index - 1].time >\r\n                            1000 * 60 && (\r\n                            <div key={item.time} className=\"time\">\r\n                              <span>\r\n                                {this.mathTime(\r\n                                  item.time,\r\n                                  messageList[index - 1].time\r\n                                )}\r\n                              </span>\r\n                            </div>\r\n                          )}\r\n                        <li\r\n                          className={\r\n                            item.sendId === myInfo._id ? \"right\" : \"left\"\r\n                          }\r\n                          key={index}\r\n                        >\r\n                          <div className=\"info\">\r\n                            <img\r\n                              src={\r\n                                item.averImg || \"https://m.baidu.com/se/static/wiseatom/personalcenter/assets/img/default_icon_02f13d8.png\"\r\n                              }\r\n                              alt={item.send}\r\n                            />\r\n                            <span>{item.send}</span>\r\n                          </div>\r\n                          <p>{item.value}</p>\r\n                        </li>\r\n                      </>\r\n                    );\r\n                  })}\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </Scroll>\r\n\r\n          <div className=\"sendbar\">\r\n            <div className=\"iconfont icon-yuyin talk\"></div>\r\n            <input type=\"text\" onKeyUp={this.sendMessageAction.bind(this)} />\r\n            <div className=\"iconfont icon-weixiao face\"></div>\r\n            <div className=\"iconfont icon-jia1 more\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  mathTime(nowT) {\r\n    const qualifier = t => {\r\n      return t > 10 ? t : \"0\" + t;\r\n    };\r\n\r\n    nowT = parseInt(nowT);\r\n    let d = new Date();\r\n    let now = new Date(nowT);\r\n    if (d.toLocaleDateString() === now.toLocaleDateString()) {\r\n      return (\r\n        qualifier(now.getHours(nowT)) +\r\n        \":\" +\r\n        qualifier(now.getMinutes(nowT)) +\r\n        \":\" +\r\n        qualifier(now.getSeconds(nowT))\r\n      );\r\n    } else {\r\n      return (\r\n        qualifier(now.getFullYear(nowT)) +\r\n        \"/\" +\r\n        qualifier(parseInt(now.getMonth(nowT)) + 1) +\r\n        \"/\" +\r\n        qualifier(now.getDate(nowT)) +\r\n        \" \" +\r\n        qualifier(now.getHours(nowT)) +\r\n        \":\" +\r\n        qualifier(now.getMinutes(nowT)) +\r\n        \":\" +\r\n        qualifier(now.getSeconds(nowT))\r\n      );\r\n    }\r\n  }\r\n\r\n  sendMoreAction() {\r\n    this.props.history.push(\"/chat/detail/\" + this.state._id);\r\n  }\r\n\r\n  async initData(_id) {\r\n    // 初始化好友信息\r\n    const result = await requestFriendBy_ID({\r\n      _id: _id\r\n    });\r\n\r\n    this.setState({\r\n      _id: _id,\r\n      user_info: {\r\n        ...result\r\n      }\r\n    });\r\n  }\r\n\r\n  async endChat() {\r\n    //结束聊天保存聊天记录\r\n    // console.log(this.state.newMessage);\r\n    if (this.state.newMessage.length === 0) {\r\n      return;\r\n    }\r\n    let message = JSON.stringify(this.state.newMessage);\r\n    let arr = [this.state.myInfo._id, this.state._id];\r\n\r\n    arr.sort();\r\n    console.log(arr);\r\n    console.log(message);\r\n    const result = await requestEndChat({\r\n      gulp: arr.toString(),\r\n      friend_id: this.state._id,\r\n      _id: this.state.myInfo._id,\r\n      message: message\r\n    });\r\n\r\n    console.log(result);\r\n  }\r\n\r\n  async initChat(_id) {\r\n    //获取历史聊天记录\r\n    //群聊就直接发gulp，在创建群聊的时候已经确定好了固定gulp值\r\n    const result = await requestStartChat({\r\n      // gulp:[this.state.myInfo._id,_id].toString(),\r\n      friend_id: _id,\r\n      _id: this.state.myInfo._id\r\n    });\r\n\r\n    // console.log(result);\r\n\r\n    this.setState({\r\n      messageList: [...result]\r\n    });\r\n  }\r\n\r\n  sendMessageAction(ev) {\r\n    ev.persist();\r\n    if (ev.keyCode === 13) {\r\n      // 发送的回车事件\r\n      // 获得用户输入\r\n      this.scroll.scroll.refresh();\r\n      this.scroll.scroll.scrollTo(\r\n        0,\r\n        this.scroll.scroll.maxScrollY,\r\n        1,\r\n        \"linear\"\r\n      );\r\n      let value = ev.target.value;\r\n      if (!value) {\r\n        alert(\"输入不能为空\");\r\n      } else {\r\n        // 发送给服务器\r\n        let arr = [this.state.myInfo._id, this.state._id];\r\n        arr.sort();\r\n        let data = {\r\n          time: Date.now(),\r\n          send: this.state.myInfo.name,\r\n          value: value,\r\n          averImg: this.state.myInfo.arerImg,\r\n          type: 1,\r\n          gulp: arr.toString(),\r\n          sendId: this.state.myInfo._id,\r\n          toId: this.state._id\r\n        };\r\n\r\n        this.websocket.send(JSON.stringify(data));\r\n\r\n        this.setState({\r\n          newMessage: [...this.state.newMessage, data],\r\n          messageList: [...this.state.messageList, data]\r\n        });\r\n        // 情空输入框\r\n        ev.target.value = \"\";\r\n      }\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    let _id = this.props.match.params.userId;\r\n\r\n    this.scroll.scroll.scrollTo(0, this.scroll.scroll.maxScrollY, 1, \"linear\");\r\n\r\n    let Info = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    this.setState(\r\n      {\r\n        myInfo: { ...Info }\r\n      },\r\n      () => {\r\n        this.initChat(_id);\r\n      }\r\n    );\r\n\r\n    this.initData(_id);\r\n\r\n    this.websocket.onmessage = ev => {\r\n      let data= JSON.parse(ev.data);\r\n      console.log(data);\r\n\r\n      if (data.status === \"ok\") {\r\n        //是你自己发送的，发送成功了\r\n        this.scroll.scroll.refresh();\r\n        this.scroll.scroll.scrollTo(\r\n          0,\r\n          this.scroll.scroll.maxScrollY,\r\n          1,\r\n          \"linear\"\r\n        );\r\n      } else {\r\n        let newMessage = [\r\n          ...this.state.messageList,\r\n          {\r\n            ...data\r\n          }\r\n        ];\r\n        const unique = (arr, key) => {\r\n          //去重\r\n          const res = new Map();\r\n          return arr.filter(a => !res.has(a[key]) && res.set(a[key], 1));\r\n        };\r\n\r\n        newMessage=unique(newMessage,'time');\r\n        this.setState({\r\n          messageList: [\r\n           ...newMessage\r\n          ]\r\n        });\r\n      }\r\n    };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.endChat();\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    websocket: state.websocket,\r\n    newMessageList: state.message\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  // onMessage(status){\r\n  //   dispatch(changeAction(status));\r\n  // }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);\r\n"],"sourceRoot":""}