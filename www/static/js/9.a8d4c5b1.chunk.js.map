{"version":3,"sources":["utils/Http.js","utils/api.js","components/Toast/toast.js","services/MineServices.js","pages/mine/regiester/regiester.js"],"names":["Http","url","data","params","Object","entries","reduce","arr","k","v","concat","encodeURIComponent","join","window","fetch","response","json","Error","method","headers","body","JSON","stringify","res","REGIESTER_API","LOGIN_API","CHECK_LOGIN","LOGOUT_API","FIND_FRIEND_BY_KEY_API","FIND_FRIEND_BY__id_API","ADD_FRIEND_API","IS_FRIEND_API","FRIEND_LIST_API","START_CHAT_API","END_CHAT_API","MESSAGE_LIST_API","toast","props","state","show","val","this","id","style","display","oldProps","setState","timer","setTimeout","clearTimeout","React","Component","requestRegiester","a","post","api","result","requestLoginByPassword","regiester","status","text","toastVal","className","type","name","placeholder","ref","inpa","inpb","inpc","inpd","onClick","nextAction","bind","history","push","value","changeStatus","initData","pass","sn","code"],"mappings":"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","file":"static/js/9.a8d4c5b1.chunk.js","sourcesContent":["// // 提供fetch请求\r\n// // 对fetch进行二次封装\r\n\r\n// import \"whatwg-fetch\";\r\n\r\n// // fetch();\r\n\r\n// export default class Http {\r\n//   static async request(method, url, data) {\r\n//     console.log(data);\r\n//     //get方法的参数直接接在url的后面\r\n//     let dataStr = \"?\";\r\n//     Object.keys(data).map(key => {\r\n//       dataStr += key + \"=\" + data[key];\r\n//     });\r\n\r\n//     //只有post方法有配置项\r\n    \r\n//     let option= method === \"POST\"?{\r\n//         method,\r\n//         headers: {\r\n//           'Content-Type': 'application/json'\r\n//         },\r\n//         body: JSON.stringify(data)\r\n//     }:{};\r\n\r\n//     url = method === \"GET\" ? url + \"?\" + dataStr : url;\r\n\r\n//     const response = await window.fetch(url,option);\r\n\r\n//     return this.isSuccess(response);\r\n//   }\r\n\r\n//   // 判断响应结果是否成功\r\n//   static isSuccess(res) {\r\n//     if (res.status >= 200 && res.status < 300) {\r\n//       return res.json();   //格式化数据\r\n//     } else {\r\n//       this.requestExpection(res);\r\n//     }\r\n//   }\r\n\r\n//   // 构建失败对象\r\n//   static requestExpection(res) {\r\n//     throw new Error(res);\r\n//   }\r\n\r\n//   static get(url, data) {\r\n//     return this.request(\"GET\", url, data);\r\n//   }\r\n\r\n//   // post便捷方法\r\n//   static post(url, data) {\r\n//     return this.request(\"POST\", url, data);\r\n//   }\r\n// }\r\n\r\nimport 'whatwg-fetch'\r\n\r\n  export default class Http{\r\n\r\n    static async get(url,data){\r\n\r\n        let params = Object.entries(data).reduce((arr, [k, v]) => arr.concat(encodeURIComponent(k) + '=' + encodeURIComponent(v)), []).join('&')\r\n        // console.log(url+'?'+params);\r\n        \r\n\r\n        try{\r\n            let response = await window.fetch(url+'?'+params);\r\n            let data = await response.json();\r\n\r\n            \r\n            return data\r\n        } catch(error){\r\n            throw new Error(error)\r\n        }\r\n    }\r\n\r\n    static async post(url,data){\r\n        try{\r\n          // console.log(data);\r\n            let response = await fetch(url,{\r\n                method:'POST',\r\n                headers:{'Content-Type': 'application/json'},\r\n                body:JSON.stringify(data)\r\n            })\r\n            let res=await response.json();\r\n            return res;\r\n        }catch(error){\r\n            throw new Error(error)\r\n        }\r\n    }\r\n  }\r\n","// 管理api\r\nexport const HOST = '';\r\n\r\n\r\n\r\n/* \r\n#### 注册\r\n**method:** post\r\n**参数:** tel      password\r\n*/\r\nconst REGIESTER_API = HOST+'/api/user/regiester';\r\n\r\n/* \r\n#### 登录\r\n**method:** post\r\n**参数:** tel   type('code',  'password' )  value \r\n*/\r\nconst LOGIN_API = HOST+'/api/user/login';\r\n\r\n/*\r\n检查登录\r\n参数：无\r\n*/\r\nconst CHECK_LOGIN = HOST+'/api/user/check_login'\r\n\r\n/*\r\n退出登录\r\n参数：无\r\n*/\r\nconst LOGOUT_API = HOST+'/api/user/logout';\r\n\r\n/*\r\n关键字搜索好友\r\n参数：key\r\n*/\r\nconst FIND_FRIEND_BY_KEY_API = HOST+'/api/user/find_friend_by_key';\r\n\r\n\r\n/*\r\n_id获取好友详细信息\r\n参数：friend_id\r\n*/\r\nconst FIND_FRIEND_BY__id_API = HOST+'/api/user/find_friend_by__id';\r\n\r\n\r\n/*\r\n添加好友\r\n参数：friend_id\r\n*/\r\nconst ADD_FRIEND_API = HOST+'/api/friend/addfriend';\r\n\r\n\r\n\r\n/*\r\n判断是否为好友\r\n参数：friend_id\r\n*/\r\nconst IS_FRIEND_API = HOST+'/api/friend/isfriend';\r\n\r\n\r\n\r\n/*\r\n请求好友列表\r\n参数：null\r\n*/\r\nconst FRIEND_LIST_API = HOST+'/api/friend/find_friend_by_user';\r\n\r\n\r\n/*\r\n开始聊天，请求聊天记录\r\n参数：_id, friend_id\r\n*/\r\nconst START_CHAT_API=HOST+'/api/message/start_chat';\r\n\r\n\r\n/*\r\n结束聊天，保存聊天记录\r\n参数：_id, friend_id\r\n*/\r\nconst END_CHAT_API=HOST+'/api/message/end_chat';\r\n\r\n/*\r\n请求信息列表\r\n参数：_id\r\n*/\r\nconst MESSAGE_LIST_API=HOST+'/api/message/messgae_list';\r\n\r\n\r\n\r\nexport default {\r\n    REGIESTER_API,\r\n    LOGIN_API,\r\n    CHECK_LOGIN,\r\n    LOGOUT_API,\r\n    FIND_FRIEND_BY_KEY_API,\r\n    FIND_FRIEND_BY__id_API,\r\n    ADD_FRIEND_API,\r\n    IS_FRIEND_API,\r\n    FRIEND_LIST_API,\r\n    START_CHAT_API,\r\n    END_CHAT_API,\r\n    MESSAGE_LIST_API\r\n}","import React from \"react\";\r\nimport './style.scss'\r\n\r\n\r\nclass toast extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state={\r\n      show:'none'\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let {val}=this.props;\r\n    let {show}=this.state;\r\n    return (\r\n      <div id=\"toast\" style={{display:show}}>\r\n        {/* <div className=\"mask\"></div> */}\r\n        <span>{val.val}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidUpdate(oldProps){\r\n\r\n    if(this.props.val!==oldProps.val){\r\n      \r\n      this.setState({\r\n        show:'block'\r\n      },()=>{\r\n        this.timer=setTimeout(()=>{\r\n          this.setState({\r\n            show:'none'\r\n          });\r\n        },3000);\r\n      })\r\n    }\r\n  }\r\n  componentWillUnmount(){\r\n    clearTimeout(this.timer);\r\n  }\r\n}\r\n\r\nexport default toast;\r\n","import Http from '../utils/Http'\r\nimport api from '../utils/api'\r\n\r\n\r\n// 注册\r\nexport const requestRegiester = async (data)=>{\r\n    let result = await Http.post(api.REGIESTER_API, data);\r\n    // console.log(result);\r\n    return result;\r\n    // if(result.code === 0){\r\n    //   return 'ok';\r\n    // }else{\r\n    //   return result.message;\r\n    // }\r\n  }\r\n  \r\n  // 密码登录\r\n  export const requestLoginByPassword = async(data)=>{\r\n    let result = await Http.post(api.LOGIN_API, data);\r\n    return result;\r\n  }\r\n\r\n//   // 检查是否登录\r\n// export const requestCheckLogin = async ()=>{\r\n//     let result = await Http.get(api.CHECK_LOGIN);\r\n//     return result.data.code;\r\n//   }\r\n  \r\n  // 退出\r\n  export const requestLogOut = async ()=>{\r\n    let result = await Http.get(api.LOGOUT_API);\r\n    return result.data.code;\r\n  }\r\n  \r\n\r\n\r\n  export default{\r\n    requestRegiester,\r\n    requestLoginByPassword,\r\n    // requestCheckLogin,\r\n    requestLogOut\r\n  }","import React from 'react';\r\nimport './style.scss'\r\nimport Toast from 'components/Toast/toast'\r\nimport {requestRegiester} from 'services/MineServices'\r\n\r\nclass regiester extends React.Component {\r\nconstructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n        status:0,\r\n        text:'下一步',\r\n        toastVal:{\r\n            val:''\r\n        }\r\n    };\r\n    \r\n}\r\n\r\n    render() {\r\n        let {status,text,toastVal}=this.state;\r\n        return (\r\n        \r\n        <div className=\"page\" id=\"regiester\">\r\n\r\n            <div className=\"reg-top\">\r\n                <h2>绑定终端机</h2>\r\n\r\n                <ul className=\"state\">\r\n                    <li className={status>=0?'active':''}><i>1</i>\r\n                        <span>输入ID码</span></li>\r\n                    <span className={status>=1?'in':'off'}></span>\r\n                    <li className={status>=1?'active':''}>\r\n                        <i>2</i>\r\n                        <span>设置账号</span>\r\n                    </li>\r\n                    <span className={status>=2?'in':'off'}></span>\r\n                    <li className={status>=2?'active':''}>\r\n                        <i>3</i>\r\n                        <span>  完成  </span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div className=\"reg-ps\"> \r\n                <div className=\"reg-p p1\" style={{display:status===0?'block':'none'}}>\r\n                    <label>\r\n                        <i className=\"iconfont icon-wode\"></i>\r\n                        <input type=\"text\" name=\"id\" placeholder=\"终端ID\" ref={(inpa)=>{\r\n                            this.inpa=inpa\r\n                        }}/>\r\n                    </label>\r\n                    <label>\r\n                        <i className=\"iconfont icon-wode\"></i>\r\n                        <input type=\"text\" name=\"SN\" placeholder=\"终端SN码\" ref={(inpb)=>{\r\n                            this.inpb=inpb\r\n                        }} />\r\n                    </label>\r\n                    <p>翻看终端背后的ID与SN码，必须正确无误</p>\r\n                </div>\r\n                <div className=\"reg-p p2\" style={{display:status===1?'block':'none'}}>\r\n                    <label>\r\n                        <i className=\"iconfont icon-wode\"></i>\r\n                        <input type=\"text\" name=\"name\" placeholder=\"设置昵称\" ref={(inpc)=>{\r\n                            this.inpc=inpc\r\n                        }}/>\r\n                    </label>\r\n                    <label>\r\n                        <i className=\"iconfont icon-wode\"></i>\r\n                        <input type=\"text\" name=\"pass\" placeholder=\"设置密码\" ref={(inpd)=>{\r\n                            this.inpd=inpd\r\n                        }}/>\r\n                    </label>\r\n                    <p>昵称须唯一且不能修改</p>\r\n                </div>\r\n                <div className=\"reg-p p3\" style={{display:status===2?'block':'none'}} >\r\n                   <div className=\"sucess\">\r\n                       <i className=\"iconfont icon-wancheng\"></i>\r\n                       <p>绑定成功</p>\r\n                   </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        <div className=\"btn\" onClick={this.nextAction.bind(this)} >{text}</div>\r\n\r\n        <Toast val={toastVal} />\r\n        </div>\r\n        );\r\n    }\r\n\r\n    nextAction(){\r\n        if(this.state.status>=2){\r\n            //跳转\r\n            this.props.history.push('./login');\r\n        }\r\n        else{\r\n            if(this.state.status===0){\r\n                // console.log(0);\r\n                if(!this.inpa.value||!this.inpb.value){\r\n                    this.setState({\r\n                        toastVal:{\r\n                            ...this.state.toastVal.val,\r\n                            val:\"请将终端ID和SN码填写完整\"\r\n                        }\r\n                    })\r\n                    return;\r\n                }\r\n                this.changeStatus()\r\n            }else if(this.state.status===1){\r\n                // console.log(1);\r\n                if(!this.inpc.value||!this.inpd.value){\r\n                    this.setState({\r\n                        toastVal:{\r\n                            ...this.state.toastVal.val,\r\n                            val:\"请将昵称和密码填写完整\"\r\n                        }\r\n                    })\r\n                    return;\r\n                }\r\n                this.initData();\r\n                \r\n            }\r\n           \r\n        }\r\n    }\r\n\r\n    changeStatus(){\r\n        this.setState({\r\n            status:this.state.status+1\r\n        },()=>{\r\n            if(this.state.status===1){\r\n                \r\n            }\r\n            if(this.state.status>=2){\r\n                \r\n                this.setState({\r\n                    text:\"完成\"\r\n                });\r\n            }\r\n        })\r\n       }\r\n\r\n       async initData(){\r\n        let result= await requestRegiester({\r\n            name:this.inpc.value,\r\n            pass:this.inpd.value,\r\n            id:this.inpa.value,\r\n            sn:this.inpb.value\r\n        });\r\n        \r\n        if(result.code===0){\r\n            // localStorage.setItem('ISLOGIN','true');\r\n            this.props.history.push('/login');\r\n            this.changeStatus();\r\n        }else{\r\n            this.setState({\r\n                toastVal:{\r\n                    ...this.state.toastVal.val,\r\n                    val:\"result.message\"\r\n                }\r\n            })\r\n        };\r\n       }\r\n\r\n    componentDidMount(){\r\n        // console.log(this.props);\r\n    }\r\n}\r\n\r\n\r\nexport default regiester;"],"sourceRoot":""}