{"version":3,"sources":["utils/Http.js","utils/api.js","components/Toast/toast.js","services/MineServices.js","pages/mine/login/login.js"],"names":["Http","url","data","params","Object","entries","reduce","arr","k","v","concat","encodeURIComponent","join","window","fetch","response","json","Error","method","headers","body","JSON","stringify","res","REGIESTER_API","LOGIN_API","CHECK_LOGIN","LOGOUT_API","FIND_FRIEND_BY_KEY_API","FIND_FRIEND_BY__id_API","ADD_FRIEND_API","IS_FRIEND_API","FRIEND_LIST_API","START_CHAT_API","END_CHAT_API","MESSAGE_LIST_API","toast","props","state","show","val","this","id","style","display","oldProps","setState","timer","setTimeout","clearTimeout","React","Component","requestRegiester","a","post","api","result","requestLoginByPassword","login","toastVal","className","type","placeholder","name","ref","pass","to","onClick","loginAction","bind","initData","value","code","localStorage","setItem","_id","document","cookie","history","push","message","getItem"],"mappings":"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","file":"static/js/8.fb2e8f14.chunk.js","sourcesContent":["// // 提供fetch请求\r\n// // 对fetch进行二次封装\r\n\r\n// import \"whatwg-fetch\";\r\n\r\n// // fetch();\r\n\r\n// export default class Http {\r\n//   static async request(method, url, data) {\r\n//     console.log(data);\r\n//     //get方法的参数直接接在url的后面\r\n//     let dataStr = \"?\";\r\n//     Object.keys(data).map(key => {\r\n//       dataStr += key + \"=\" + data[key];\r\n//     });\r\n\r\n//     //只有post方法有配置项\r\n    \r\n//     let option= method === \"POST\"?{\r\n//         method,\r\n//         headers: {\r\n//           'Content-Type': 'application/json'\r\n//         },\r\n//         body: JSON.stringify(data)\r\n//     }:{};\r\n\r\n//     url = method === \"GET\" ? url + \"?\" + dataStr : url;\r\n\r\n//     const response = await window.fetch(url,option);\r\n\r\n//     return this.isSuccess(response);\r\n//   }\r\n\r\n//   // 判断响应结果是否成功\r\n//   static isSuccess(res) {\r\n//     if (res.status >= 200 && res.status < 300) {\r\n//       return res.json();   //格式化数据\r\n//     } else {\r\n//       this.requestExpection(res);\r\n//     }\r\n//   }\r\n\r\n//   // 构建失败对象\r\n//   static requestExpection(res) {\r\n//     throw new Error(res);\r\n//   }\r\n\r\n//   static get(url, data) {\r\n//     return this.request(\"GET\", url, data);\r\n//   }\r\n\r\n//   // post便捷方法\r\n//   static post(url, data) {\r\n//     return this.request(\"POST\", url, data);\r\n//   }\r\n// }\r\n\r\nimport 'whatwg-fetch'\r\n\r\n  export default class Http{\r\n\r\n    static async get(url,data){\r\n\r\n        let params = Object.entries(data).reduce((arr, [k, v]) => arr.concat(encodeURIComponent(k) + '=' + encodeURIComponent(v)), []).join('&')\r\n        // console.log(url+'?'+params);\r\n        \r\n\r\n        try{\r\n            let response = await window.fetch(url+'?'+params);\r\n            let data = await response.json();\r\n\r\n            \r\n            return data\r\n        } catch(error){\r\n            throw new Error(error)\r\n        }\r\n    }\r\n\r\n    static async post(url,data){\r\n        try{\r\n          // console.log(data);\r\n            let response = await fetch(url,{\r\n                method:'POST',\r\n                headers:{'Content-Type': 'application/json'},\r\n                body:JSON.stringify(data)\r\n            })\r\n            let res=await response.json();\r\n            return res;\r\n        }catch(error){\r\n            throw new Error(error)\r\n        }\r\n    }\r\n  }\r\n","// 管理api\r\nexport const HOST = '';\r\n\r\n\r\n\r\n/* \r\n#### 注册\r\n**method:** post\r\n**参数:** tel      password\r\n*/\r\nconst REGIESTER_API = HOST+'/api/user/regiester';\r\n\r\n/* \r\n#### 登录\r\n**method:** post\r\n**参数:** tel   type('code',  'password' )  value \r\n*/\r\nconst LOGIN_API = HOST+'/api/user/login';\r\n\r\n/*\r\n检查登录\r\n参数：无\r\n*/\r\nconst CHECK_LOGIN = HOST+'/api/user/check_login'\r\n\r\n/*\r\n退出登录\r\n参数：无\r\n*/\r\nconst LOGOUT_API = HOST+'/api/user/logout';\r\n\r\n/*\r\n关键字搜索好友\r\n参数：key\r\n*/\r\nconst FIND_FRIEND_BY_KEY_API = HOST+'/api/user/find_friend_by_key';\r\n\r\n\r\n/*\r\n_id获取好友详细信息\r\n参数：friend_id\r\n*/\r\nconst FIND_FRIEND_BY__id_API = HOST+'/api/user/find_friend_by__id';\r\n\r\n\r\n/*\r\n添加好友\r\n参数：friend_id\r\n*/\r\nconst ADD_FRIEND_API = HOST+'/api/friend/addfriend';\r\n\r\n\r\n\r\n/*\r\n判断是否为好友\r\n参数：friend_id\r\n*/\r\nconst IS_FRIEND_API = HOST+'/api/friend/isfriend';\r\n\r\n\r\n\r\n/*\r\n请求好友列表\r\n参数：null\r\n*/\r\nconst FRIEND_LIST_API = HOST+'/api/friend/find_friend_by_user';\r\n\r\n\r\n/*\r\n开始聊天，请求聊天记录\r\n参数：_id, friend_id\r\n*/\r\nconst START_CHAT_API=HOST+'/api/message/start_chat';\r\n\r\n\r\n/*\r\n结束聊天，保存聊天记录\r\n参数：_id, friend_id\r\n*/\r\nconst END_CHAT_API=HOST+'/api/message/end_chat';\r\n\r\n/*\r\n请求信息列表\r\n参数：_id\r\n*/\r\nconst MESSAGE_LIST_API=HOST+'/api/message/messgae_list';\r\n\r\n\r\n\r\nexport default {\r\n    REGIESTER_API,\r\n    LOGIN_API,\r\n    CHECK_LOGIN,\r\n    LOGOUT_API,\r\n    FIND_FRIEND_BY_KEY_API,\r\n    FIND_FRIEND_BY__id_API,\r\n    ADD_FRIEND_API,\r\n    IS_FRIEND_API,\r\n    FRIEND_LIST_API,\r\n    START_CHAT_API,\r\n    END_CHAT_API,\r\n    MESSAGE_LIST_API\r\n}","import React from \"react\";\r\nimport './style.scss'\r\n\r\n\r\nclass toast extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state={\r\n      show:'none'\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let {val}=this.props;\r\n    let {show}=this.state;\r\n    return (\r\n      <div id=\"toast\" style={{display:show}}>\r\n        {/* <div className=\"mask\"></div> */}\r\n        <span>{val.val}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidUpdate(oldProps){\r\n\r\n    if(this.props.val!==oldProps.val){\r\n      \r\n      this.setState({\r\n        show:'block'\r\n      },()=>{\r\n        this.timer=setTimeout(()=>{\r\n          this.setState({\r\n            show:'none'\r\n          });\r\n        },3000);\r\n      })\r\n    }\r\n  }\r\n  componentWillUnmount(){\r\n    clearTimeout(this.timer);\r\n  }\r\n}\r\n\r\nexport default toast;\r\n","import Http from '../utils/Http'\r\nimport api from '../utils/api'\r\n\r\n\r\n// 注册\r\nexport const requestRegiester = async (data)=>{\r\n    let result = await Http.post(api.REGIESTER_API, data);\r\n    // console.log(result);\r\n    return result;\r\n    // if(result.code === 0){\r\n    //   return 'ok';\r\n    // }else{\r\n    //   return result.message;\r\n    // }\r\n  }\r\n  \r\n  // 密码登录\r\n  export const requestLoginByPassword = async(data)=>{\r\n    let result = await Http.post(api.LOGIN_API, data);\r\n    return result;\r\n  }\r\n\r\n//   // 检查是否登录\r\n// export const requestCheckLogin = async ()=>{\r\n//     let result = await Http.get(api.CHECK_LOGIN);\r\n//     return result.data.code;\r\n//   }\r\n  \r\n  // 退出\r\n  export const requestLogOut = async ()=>{\r\n    let result = await Http.get(api.LOGOUT_API);\r\n    return result.data.code;\r\n  }\r\n  \r\n\r\n\r\n  export default{\r\n    requestRegiester,\r\n    requestLoginByPassword,\r\n    // requestCheckLogin,\r\n    requestLogOut\r\n  }","import React from \"react\";\r\nimport \"./style.scss\";\r\nimport { requestLoginByPassword } from \"services/MineServices\";\r\nimport Toast from \"components/Toast/toast\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass login extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      toastVal: {\r\n        val: \"\"\r\n      }\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let { toastVal } = this.state;\r\n    return (\r\n      <div className=\"page\" id=\"login\">\r\n        <div className=\"login-top\">\r\n          <h2>登录</h2>\r\n          <div className=\"text\">\r\n            <p>随时随地 想说就说</p>\r\n            <div className=\"vioce\">\r\n              <i className=\"iconfont icon-shengyin\"></i>\r\n              <i className=\"iconfont icon-shengyin\"></i>\r\n              <i className=\"iconfont icon-shengyin\"></i>\r\n              <i className=\"iconfont icon-shengyin\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"cont\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"昵称\"\r\n            name=\"name\"\r\n            ref={name => {\r\n              this.name = name;\r\n            }}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"密码\"\r\n            name=\"pass\"\r\n            ref={pass => {\r\n              this.pass = pass;\r\n            }}\r\n          />\r\n\r\n          <Link to=\"/regiester\" className=\"toregiester\">\r\n            去注册\r\n          </Link>\r\n          <div className=\"login-btn\" onClick={this.loginAction.bind(this)}>\r\n            登录\r\n          </div>\r\n        </div>\r\n\r\n        <Toast val={toastVal} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  loginAction() {\r\n    this.initData();\r\n  }\r\n  async initData() {\r\n    if (!this.name.value || !this.pass.value) {\r\n      this.setState({\r\n        toastVal: {\r\n          ...this.state.toastVal.val,\r\n          val: \"请将信息填写完整\"\r\n        }\r\n      });\r\n      return;\r\n    }\r\n    const result = await requestLoginByPassword({\r\n      name: this.name.value,\r\n      pass: this.pass.value\r\n    });\r\n\r\n    if (result.code === 0) {\r\n      this.setState({\r\n        toastVal: {\r\n          ...this.state.toastVal.val,\r\n          val: \"登录成功\"\r\n        }\r\n      });\r\n      localStorage.setItem(\"ISLOGIN\", \"true\");\r\n      localStorage.setItem(\r\n        \"userInfo\",\r\n        JSON.stringify({\r\n          _id: result.data._id,\r\n          name: result.data.name,\r\n          id: result.data.id\r\n        })\r\n      );\r\n      //设置cookie\r\n      document.cookie = `user_id=${result.data._id}`;\r\n      // document.cookie=`user_name=${this.name.value}`;\r\n      this.props.history.push(\"/\");\r\n    } else {\r\n      this.setState({\r\n        toastVal: {\r\n          ...this.state.toastVal.val,\r\n          val:result.message\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (localStorage.getItem(\"ISLOGIN\")) {\r\n      //登录了\r\n      this.props.history.push(\"/message\");\r\n    }\r\n  }\r\n}\r\nexport default login;\r\n"],"sourceRoot":""}